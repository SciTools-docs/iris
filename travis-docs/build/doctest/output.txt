Results of doctest builder run on 2017-06-21 09:56:37
=====================================================

Document: userguide/interpolation_and_regridding
------------------------------------------------
1 items passed all tests:
  43 tests in default
43 tests in 1 items.
43 passed and 0 failed.
Test passed.

Document: iris/iris/analysis/interpolate
----------------------------------------
1 items passed all tests:
  12 tests in default
12 tests in 1 items.
12 passed and 0 failed.
Test passed.

Document: iris/iris/fileformats/pp
----------------------------------
1 items passed all tests:
  19 tests in default
19 tests in 1 items.
19 passed and 0 failed.
Test passed.

Document: iris/iris/unit
------------------------
1 items passed all tests:
  97 tests in default
97 tests in 1 items.
97 passed and 0 failed.
Test passed.

Document: userguide/merge_and_concat
------------------------------------
6 items passed all tests:
   2 tests in concatenate
   8 tests in concatenate_time_units
   5 tests in concatenate_vs_concatenate_cube
   5 tests in merge
   3 tests in merge_duplicate
  15 tests in merge_vs_merge_cube
38 tests in 6 items.
38 passed and 0 failed.
Test passed.

Document: userguide/navigating_a_cube
-------------------------------------
1 items passed all tests:
  12 tests in default
12 tests in 1 items.
12 passed and 0 failed.
Test passed.

Document: userguide/iris_cubes
------------------------------
1 items passed all tests:
   1 tests in default
1 tests in 1 items.
1 passed and 0 failed.
Test passed.

Document: userguide/loading_iris_cubes
--------------------------------------
**********************************************************************
File "userguide/loading_iris_cubes.rst", line ?, in default
Failed example:
    print('All times :\n' + str(cube_all.coord('time')))
Expected:
    All times :
    DimCoord([2009-11-19 10:00:00, 2009-11-19 11:00:00, 2009-11-19 12:00:00], standard_name='time', calendar='gregorian')
Got:
    All times :
    DimCoord([datetime.datetime(2009, 11, 19, 10, 0),
           datetime.datetime(2009, 11, 19, 11, 0),
           datetime.datetime(2009, 11, 19, 12, 0)], standard_name='time', calendar='gregorian')
**********************************************************************
File "userguide/loading_iris_cubes.rst", line ?, in default
Failed example:
    print('Selected times :\n' + str(cube_11.coord('time')))
Expected:
    Selected times :
    DimCoord([2009-11-19 11:00:00], standard_name='time', calendar='gregorian')
Got:
    Selected times :
    DimCoord([datetime.datetime(2009, 11, 19, 11, 0)], standard_name='time', calendar='gregorian')
**********************************************************************
File "userguide/loading_iris_cubes.rst", line ?, in default
Failed example:
    with iris.FUTURE.context(cell_datetime_objects=True):
        print(iris.load_cube(
            iris.sample_data_path('uk_hires.pp'),
            'air_potential_temperature' & the_11th_hour).coord('time'))
Expected:
    DimCoord([2009-11-19 11:00:00], standard_name='time', calendar='gregorian')
Got:
    DimCoord([datetime.datetime(2009, 11, 19, 11, 0)], standard_name='time', calendar='gregorian')
**********************************************************************
File "userguide/loading_iris_cubes.rst", line 291, in timeseries_range
Failed example:
    print(long_ts.coord('time'))
Expected:
    DimCoord([2007-04-09 00:00:00, 2007-04-16 00:00:00, 2007-04-23 00:00:00,
              ...
              2010-02-01 00:00:00, 2010-02-08 00:00:00, 2010-02-15 00:00:00],
             standard_name='time', calendar='gregorian')
Got:
    DimCoord([datetime.datetime(2007, 4, 9, 0, 0),
           datetime.datetime(2007, 4, 16, 0, 0),
           datetime.datetime(2007, 4, 23, 0, 0),
           datetime.datetime(2007, 4, 30, 0, 0),
           datetime.datetime(2007, 5, 7, 0, 0),
           datetime.datetime(2007, 5, 14, 0, 0),
           datetime.datetime(2007, 5, 21, 0, 0),
           datetime.datetime(2007, 5, 28, 0, 0),
           datetime.datetime(2007, 6, 4, 0, 0),
           datetime.datetime(2007, 6, 11, 0, 0),
           datetime.datetime(2007, 6, 18, 0, 0),
           datetime.datetime(2007, 6, 25, 0, 0),
           datetime.datetime(2007, 7, 2, 0, 0),
           datetime.datetime(2007, 7, 9, 0, 0),
           datetime.datetime(2007, 7, 16, 0, 0),
           datetime.datetime(2007, 7, 23, 0, 0),
           datetime.datetime(2007, 7, 30, 0, 0),
           datetime.datetime(2007, 8, 6, 0, 0),
           datetime.datetime(2007, 8, 13, 0, 0),
           datetime.datetime(2007, 8, 20, 0, 0),
           datetime.datetime(2007, 8, 27, 0, 0),
           datetime.datetime(2007, 9, 3, 0, 0),
           datetime.datetime(2007, 9, 10, 0, 0),
           datetime.datetime(2007, 9, 17, 0, 0),
           datetime.datetime(2007, 9, 24, 0, 0),
           datetime.datetime(2007, 10, 1, 0, 0),
           datetime.datetime(2007, 10, 8, 0, 0),
           datetime.datetime(2007, 10, 15, 0, 0),
           datetime.datetime(2007, 10, 22, 0, 0),
           datetime.datetime(2007, 10, 29, 0, 0),
           datetime.datetime(2007, 11, 5, 0, 0),
           datetime.datetime(2007, 11, 12, 0, 0),
           datetime.datetime(2007, 11, 19, 0, 0),
           datetime.datetime(2007, 11, 26, 0, 0),
           datetime.datetime(2007, 12, 3, 0, 0),
           datetime.datetime(2007, 12, 10, 0, 0),
           datetime.datetime(2007, 12, 17, 0, 0),
           datetime.datetime(2007, 12, 24, 0, 0),
           datetime.datetime(2007, 12, 31, 0, 0),
           datetime.datetime(2008, 1, 7, 0, 0),
           datetime.datetime(2008, 1, 14, 0, 0),
           datetime.datetime(2008, 1, 21, 0, 0),
           datetime.datetime(2008, 1, 28, 0, 0),
           datetime.datetime(2008, 2, 4, 0, 0),
           datetime.datetime(2008, 2, 11, 0, 0),
           datetime.datetime(2008, 2, 18, 0, 0),
           datetime.datetime(2008, 2, 25, 0, 0),
           datetime.datetime(2008, 3, 3, 0, 0),
           datetime.datetime(2008, 3, 10, 0, 0),
           datetime.datetime(2008, 3, 17, 0, 0),
           datetime.datetime(2008, 3, 24, 0, 0),
           datetime.datetime(2008, 3, 31, 0, 0),
           datetime.datetime(2008, 4, 7, 0, 0),
           datetime.datetime(2008, 4, 14, 0, 0),
           datetime.datetime(2008, 4, 21, 0, 0),
           datetime.datetime(2008, 4, 28, 0, 0),
           datetime.datetime(2008, 5, 5, 0, 0),
           datetime.datetime(2008, 5, 12, 0, 0),
           datetime.datetime(2008, 5, 19, 0, 0),
           datetime.datetime(2008, 5, 26, 0, 0),
           datetime.datetime(2008, 6, 2, 0, 0),
           datetime.datetime(2008, 6, 9, 0, 0),
           datetime.datetime(2008, 6, 16, 0, 0),
           datetime.datetime(2008, 6, 23, 0, 0),
           datetime.datetime(2008, 6, 30, 0, 0),
           datetime.datetime(2008, 7, 7, 0, 0),
           datetime.datetime(2008, 7, 14, 0, 0),
           datetime.datetime(2008, 7, 21, 0, 0),
           datetime.datetime(2008, 7, 28, 0, 0),
           datetime.datetime(2008, 8, 4, 0, 0),
           datetime.datetime(2008, 8, 11, 0, 0),
           datetime.datetime(2008, 8, 18, 0, 0),
           datetime.datetime(2008, 8, 25, 0, 0),
           datetime.datetime(2008, 9, 1, 0, 0),
           datetime.datetime(2008, 9, 8, 0, 0),
           datetime.datetime(2008, 9, 15, 0, 0),
           datetime.datetime(2008, 9, 22, 0, 0),
           datetime.datetime(2008, 9, 29, 0, 0),
           datetime.datetime(2008, 10, 6, 0, 0),
           datetime.datetime(2008, 10, 13, 0, 0),
           datetime.datetime(2008, 10, 20, 0, 0),
           datetime.datetime(2008, 10, 27, 0, 0),
           datetime.datetime(2008, 11, 3, 0, 0),
           datetime.datetime(2008, 11, 10, 0, 0),
           datetime.datetime(2008, 11, 17, 0, 0),
           datetime.datetime(2008, 11, 24, 0, 0),
           datetime.datetime(2008, 12, 1, 0, 0),
           datetime.datetime(2008, 12, 8, 0, 0),
           datetime.datetime(2008, 12, 15, 0, 0),
           datetime.datetime(2008, 12, 22, 0, 0),
           datetime.datetime(2008, 12, 29, 0, 0),
           datetime.datetime(2009, 1, 5, 0, 0),
           datetime.datetime(2009, 1, 12, 0, 0),
           datetime.datetime(2009, 1, 19, 0, 0),
           datetime.datetime(2009, 1, 26, 0, 0),
           datetime.datetime(2009, 2, 2, 0, 0),
           datetime.datetime(2009, 2, 9, 0, 0),
           datetime.datetime(2009, 2, 16, 0, 0),
           datetime.datetime(2009, 2, 23, 0, 0),
           datetime.datetime(2009, 3, 2, 0, 0),
           datetime.datetime(2009, 3, 9, 0, 0),
           datetime.datetime(2009, 3, 16, 0, 0),
           datetime.datetime(2009, 3, 23, 0, 0),
           datetime.datetime(2009, 3, 30, 0, 0),
           datetime.datetime(2009, 4, 6, 0, 0),
           datetime.datetime(2009, 4, 13, 0, 0),
           datetime.datetime(2009, 4, 20, 0, 0),
           datetime.datetime(2009, 4, 27, 0, 0),
           datetime.datetime(2009, 5, 4, 0, 0),
           datetime.datetime(2009, 5, 11, 0, 0),
           datetime.datetime(2009, 5, 18, 0, 0),
           datetime.datetime(2009, 5, 25, 0, 0),
           datetime.datetime(2009, 6, 1, 0, 0),
           datetime.datetime(2009, 6, 8, 0, 0),
           datetime.datetime(2009, 6, 15, 0, 0),
           datetime.datetime(2009, 6, 22, 0, 0),
           datetime.datetime(2009, 6, 29, 0, 0),
           datetime.datetime(2009, 7, 6, 0, 0),
           datetime.datetime(2009, 7, 13, 0, 0),
           datetime.datetime(2009, 7, 20, 0, 0),
           datetime.datetime(2009, 7, 27, 0, 0),
           datetime.datetime(2009, 8, 3, 0, 0),
           datetime.datetime(2009, 8, 10, 0, 0),
           datetime.datetime(2009, 8, 17, 0, 0),
           datetime.datetime(2009, 8, 24, 0, 0),
           datetime.datetime(2009, 8, 31, 0, 0),
           datetime.datetime(2009, 9, 7, 0, 0),
           datetime.datetime(2009, 9, 14, 0, 0),
           datetime.datetime(2009, 9, 21, 0, 0),
           datetime.datetime(2009, 9, 28, 0, 0),
           datetime.datetime(2009, 10, 5, 0, 0),
           datetime.datetime(2009, 10, 12, 0, 0),
           datetime.datetime(2009, 10, 19, 0, 0),
           datetime.datetime(2009, 10, 26, 0, 0),
           datetime.datetime(2009, 11, 2, 0, 0),
           datetime.datetime(2009, 11, 9, 0, 0),
           datetime.datetime(2009, 11, 16, 0, 0),
           datetime.datetime(2009, 11, 23, 0, 0),
           datetime.datetime(2009, 11, 30, 0, 0),
           datetime.datetime(2009, 12, 7, 0, 0),
           datetime.datetime(2009, 12, 14, 0, 0),
           datetime.datetime(2009, 12, 21, 0, 0),
           datetime.datetime(2009, 12, 28, 0, 0),
           datetime.datetime(2010, 1, 4, 0, 0),
           datetime.datetime(2010, 1, 11, 0, 0),
           datetime.datetime(2010, 1, 18, 0, 0),
           datetime.datetime(2010, 1, 25, 0, 0),
           datetime.datetime(2010, 2, 1, 0, 0),
           datetime.datetime(2010, 2, 8, 0, 0),
           datetime.datetime(2010, 2, 15, 0, 0)], standard_name='time', calendar='gregorian')
**********************************************************************
File "userguide/loading_iris_cubes.rst", line 309, in timeseries_range
Failed example:
    print(within_st_swithuns.coord('time'))
Expected:
    DimCoord([2007-07-16 00:00:00, 2007-07-23 00:00:00, 2007-07-30 00:00:00,
           2007-08-06 00:00:00, 2007-08-13 00:00:00, 2007-08-20 00:00:00,
           2008-07-21 00:00:00, 2008-07-28 00:00:00, 2008-08-04 00:00:00,
           2008-08-11 00:00:00, 2008-08-18 00:00:00, 2009-07-20 00:00:00,
           2009-07-27 00:00:00, 2009-08-03 00:00:00, 2009-08-10 00:00:00,
           2009-08-17 00:00:00, 2009-08-24 00:00:00], standard_name='time', calendar='gregorian')
Got:
    DimCoord([datetime.datetime(2007, 7, 16, 0, 0),
           datetime.datetime(2007, 7, 23, 0, 0),
           datetime.datetime(2007, 7, 30, 0, 0),
           datetime.datetime(2007, 8, 6, 0, 0),
           datetime.datetime(2007, 8, 13, 0, 0),
           datetime.datetime(2007, 8, 20, 0, 0),
           datetime.datetime(2008, 7, 21, 0, 0),
           datetime.datetime(2008, 7, 28, 0, 0),
           datetime.datetime(2008, 8, 4, 0, 0),
           datetime.datetime(2008, 8, 11, 0, 0),
           datetime.datetime(2008, 8, 18, 0, 0),
           datetime.datetime(2009, 7, 20, 0, 0),
           datetime.datetime(2009, 7, 27, 0, 0),
           datetime.datetime(2009, 8, 3, 0, 0),
           datetime.datetime(2009, 8, 10, 0, 0),
           datetime.datetime(2009, 8, 17, 0, 0),
           datetime.datetime(2009, 8, 24, 0, 0)], standard_name='time', calendar='gregorian')
**********************************************************************
2 items had failures:
   3 of  25 in default
   2 of   4 in timeseries_range
29 tests in 2 items.
24 passed and 5 failed.
***Test Failed*** 5 failures.

Document: userguide/subsetting_a_cube
-------------------------------------
1 items passed all tests:
  12 tests in default
12 tests in 1 items.
12 passed and 0 failed.
Test passed.

Document: userguide/cube_statistics
-----------------------------------
2 items passed all tests:
  10 tests in aggregation
   9 tests in default
19 tests in 2 items.
19 passed and 0 failed.
Test passed.

Document: userguide/real_and_lazy_data
--------------------------------------
1 items passed all tests:
  16 tests in default
16 tests in 1 items.
16 passed and 0 failed.
Test passed.

Document: iris/iris/time
------------------------
1 items passed all tests:
   7 tests in default
7 tests in 1 items.
7 passed and 0 failed.
Test passed.

Document: userguide/cube_maths
------------------------------
1 items passed all tests:
   1 tests in default
1 tests in 1 items.
1 passed and 0 failed.
Test passed.

Document: iris/iris/analysis/cartography
----------------------------------------
1 items passed all tests:
   1 tests in default
1 tests in 1 items.
1 passed and 0 failed.
Test passed.

Document: whitepapers/um_files_loading
--------------------------------------
1 items passed all tests:
  17 tests in default
17 tests in 1 items.
17 passed and 0 failed.
Test passed.
1 items passed all tests:
   1 tests in default (cleanup code)
1 tests in 1 items.
1 passed and 0 failed.
Test passed.

Document: iris/iris/fileformats/um
----------------------------------
1 items passed all tests:
   5 tests in default
5 tests in 1 items.
5 passed and 0 failed.
Test passed.

Document: iris/iris/coords
--------------------------
1 items passed all tests:
   9 tests in default
9 tests in 1 items.
9 passed and 0 failed.
Test passed.

Document: iris/iris/iterate
---------------------------
1 items passed all tests:
   2 tests in default
2 tests in 1 items.
2 passed and 0 failed.
Test passed.

Document: iris/iris/util
------------------------
1 items passed all tests:
   5 tests in default
5 tests in 1 items.
5 passed and 0 failed.
Test passed.

Document: whatsnew/1.12
-----------------------
1 items passed all tests:
   4 tests in default
4 tests in 1 items.
4 passed and 0 failed.
Test passed.

Document: iris/iris/io
----------------------
1 items passed all tests:
   7 tests in default
7 tests in 1 items.
7 passed and 0 failed.
Test passed.

Document: userguide/saving_iris_cubes
-------------------------------------
1 items passed all tests:
   8 tests in default
8 tests in 1 items.
8 passed and 0 failed.
Test passed.

Document: iris/iris/cube
------------------------
**********************************************************************
File "iris/iris/cube.rst", line ?, in default
Failed example:
    print(cube.coord('time'))
Expected:
    DimCoord([2009-11-19 10:00:00, 2009-11-19 11:00:00, 2009-11-19 12:00:00], standard_name='time', calendar='gregorian')
Got:
    DimCoord([datetime.datetime(2009, 11, 19, 10, 0),
           datetime.datetime(2009, 11, 19, 11, 0),
           datetime.datetime(2009, 11, 19, 12, 0)], standard_name='time', calendar='gregorian')
**********************************************************************
File "iris/iris/cube.rst", line ?, in default
Failed example:
    print(result.coord('time'))
Expected:
    DimCoord([2009-11-19 10:30:00], standard_name='time', calendar='gregorian')
Got:
    DimCoord([datetime.datetime(2009, 11, 19, 10, 30)], standard_name='time', calendar='gregorian')
**********************************************************************
File "iris/iris/cube.rst", line ?, in default
Failed example:
    print(result2.coord('time'))
Expected:
    DimCoord([2009-11-19 10:30:00], standard_name='time', calendar='gregorian')
Got:
    DimCoord([datetime.datetime(2009, 11, 19, 10, 30)], standard_name='time', calendar='gregorian')
**********************************************************************
1 items had failures:
   3 of  56 in default
56 tests in 1 items.
53 passed and 3 failed.
***Test Failed*** 3 failures.

Doctest summary
===============
  420 tests
    8 failures in tests
    0 failures in setup code
    0 failures in cleanup code
