What's New in Iris <interim>
****************************

:Release: <interim>
:Date: <unreleased>

This document explains the new/changed features of Iris in version <interim>
(:doc:`View all changes <index>`.)

Iris <interim> Features
=======================
* Added support to render HTML for :class:`~iris.cube.CubeList`s in Jupyter Notebooks and JupyterLab. 

----

* Cube data equality testing (and hence cube equality) now uses a more relaxed
  tolerance : This means that some cubes may now test 'equal' that previously
  did not.
  Previously, Iris compared cube data arrays using "abs(a - b) < 1.e-8".
  We now apply the default operation of :func:`numpy.allclose` instead,
  which is equivalent to "abs(a - b) < (1.e-8 + 1.e-5 * b)".

----

* Loading CellMeasures with non-float values is now supported.

----

* New coordinate system: :class:`iris.coord_systems.Geostationary`, based on
the `CF Geostationary projection definition <http://cfconventions
.org/cf-conventions/cf-conventions.html#_geostationary_projection>`_.
* :class:`iris.coord_systems.VerticalPerspective` can now be saved to and
loaded from NetCDF files.

----

* Support for loading, storing and saving of NetCDF climatological coordinates.
Stored as a boolean property - ``climatological`` - of the relevant
cube coordinate.

----

* :class:`iris.experimental.regrid.PointInCell` moved to
:class:`iris.analysis.PointInCell` to make this regridding scheme public

----

* Iris now supports standard name modifiers. See `Appendix C, Standard Name Modifiers <http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html#standard-name-modifiers>`_ for more information.

----

* :meth:`iris.cube.Cube.aggregated_by` now performs aggregation lazily where
possible.

----

* :meth:`iris.cube.Cube.remove_cell_measure` now also allows removal of a cell
measure by its name (previously only accepted a CellMeasure object).

----

* The :data:`iris.analysis.RMS` aggregator now supports a lazy calculation.
  However, the "weights" keyword is not currently supported by this, so a
  *weighted* calculation will still return a realised result, *and* force
  realisation of the original cube data.

----

* Iris now makes better choices of dask chunk sizes, when loading from netcdf
  files:  If a file variable has specified, small chunks, Iris will now choose
  dask chunks which are a multiple of these, up to a default target size.
  This is particularly relevant to files with an unlimited dimension, which
  previously could produce a large number of small chunks.
  In addition, Iris now takes its default chunksize from the default configured
  in dask itself, i.e. `dask.config.get('array.chunk-size')`.

----


Bugs Fixed
==========
* Cube equality of boolean data is now handled correctly.

----

* Iris now supports NetCDF Climate and Forecast (CF) Metadata Conventions 1.7 (see `CF 1.7 Conventions Document <http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html>`_ for more information)

----

* The :class:`~iris.coords.AuxCoord` disregarded masked points and bounds, as did the :class:`~iris.coords.DimCoord`.
  Fix permits an :class:`~iris.coords.AuxCoord` to contain masked points/bounds, and an TypeError exception is now
  raised when attempting to create or set the points/bounds of a :class:`~iris.coords.DimCoord` with masked arrays.

----

* Fixed a bug where cell measures were incorrect after a cube 
  :meth:`~iris.cube.Cube.transpose` operation.  Previously, this resulted in
  cell-measures that were no longer correctly mapped to the cube dimensions.

----

* :class:`iris.coord_systems.VerticalPerspective` coordinate system now uses
the `CF Vertical perspective definition <http://cfconventions
.org/cf-conventions/cf-conventions.html#vertical-perspective>`_; had been
erroneously using Geostationary.

----

* :class:`~iris.coords.CellMethod` will now only use valid `NetCDF name tokens <https://www.unidata.ucar.edu/software/netcdf/docs/netcdf_data_set_components.html#object_name>`_ to reference the coordinates involved in the statistical operation.

----

* :attr:`~iris.aux_factory.AuxCoordFactory.var_name`, :attr:`~iris.coords.CellMeasure.var_name`, :attr:`~iris.coords.Coord.var_name`, :attr:`~iris.coords.AuxCoord.var_name` and :attr:`~iris.cube.Cube.var_name` will now only use valid `NetCDF name tokens <https://www.unidata.ucar.edu/software/netcdf/docs/netcdf_data_set_components.html#object_name>`_ to reference the said NetCDF variable name. Note that, names with a leading inderscore are not permitted.

----

* Cubes are now rendered more robustly by Jupyter.
:meth:`~iris.cube.Cube._repr_html_` no longer crashes for a cube with
attributes containing '\n'.

----

* Variables which reference themselves in ``cell_measures`` can now be read.

----

* :func:`~iris.plot.quiver` now handles circular coordinates.

----

* The name of cubes loaded from abf/abl files has been corrected.

----

* Fixed a bug in UM file loading, where any landsea-mask-compressed fields
 (i.e. with LBPACK=x2x) would cause an error later, when realising the data.

----

* :meth:`iris.cube.Cube.collapsed` now handles partial collapsing of
multidimensional coordinates that have bounds.

----

* Fixed a bug in the :data:`~iris.analysis.PROPORTION` aggregator, where cube
  data in the form of a masked array with "array.mask=False" would cause an
  error, but possibly only later when the values are actually realised.
  ( Note: since netCDF4 version 1.4.0, this is now a common form for data
  loaded from netCDF files ).

----

* Fixed a bug where plotting a cube with a
  :class:`iris.coord_systems.LamberConformal` coordinate system would result
  in an error.  This would happen if the coordinate system was defined with one
  standard parallel, rather than two.
  In these cases, a call to
  :meth:`~iris.coord_systems.LambertConform.as_cartopy_crs` would fail.

----

* :meth:`iris.cube.Cube.aggregated_by` now gives correct values in points and
bounds when handling multidimensional coordinates.

----

* Fixed a bug in the :meth:`iris.cube.Cube.collapse` operation, which caused
  the unexpected realization of any attached auxiliary coordinates that were
  _bounded_.  It now correctly produces a lazy result and does not realise the
  original attached AuxCoords.

----


Documentation Changes
=====================
* Added a gallery example showing how to concatenate NEMO ocean model data.

----

* Added an example in the 
  `Loading Iris Cubes: Constraining on Time <https://scitools.org.uk/iris/docs/latest/userguide/loading_iris_cubes.html#constraining-on-time>`_
  Userguide section, demonstrating how to load data within a specified date
  range.

----

* Added notes to the :func:`iris.load` documentation, and the userguide
  `Loading Iris Cubes <https://scitools.org.uk/iris/docs/latest/userguide/loading_iris_cubes.html>`_
  chapter, emphasizing that the _order_ of the cubes returned by an iris load
  operation is effectively random and unstable, and should not be relied on.

----

* Fixed references in the documentation of
  :func:`iris.utils.find_discontiguities` to a nonexistent
  "mask_discontiguities" routine : these now refer to
  :func:`~iris.utils.mask_cube`.

----

